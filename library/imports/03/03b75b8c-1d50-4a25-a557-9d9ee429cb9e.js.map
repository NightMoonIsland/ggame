{"version":3,"sources":["assets/script/appStart.js"],"names":["init","cc","tool","viewManager","require","viewRegister","timeHandler","eventManager","gameVariable","Lang","prefab","config","registView","Class","extends","Component","properties","haha","count","onLoad","schedule","updateTime","console","log","VAR_CHANGE","sec","initScene","testRemove","changeView","btnBack","backPreview"],"mappings":";;;;;;;;AAAA,SAASA,IAAT,GAAe;AACXC,OAAGC,IAAH,GAAU,EAAV;AACA,QAAIC,cAAcC,QAAQ,aAAR,CAAlB;AACAH,OAAGC,IAAH,CAAQC,WAAR,GAAsB,IAAIA,WAAJ,EAAtB;AACAF,OAAGC,IAAH,CAAQC,WAAR,CAAoBH,IAApB;;AAGAI,YAAQ,cAAR;AACAC;;AAEA,QAAIC,cAAcF,QAAQ,aAAR,CAAlB;AACAH,OAAGC,IAAH,CAAQI,WAAR,GAAsB,IAAIA,WAAJ,EAAtB;;AAEA,QAAIC,eAAeH,QAAQ,cAAR,CAAnB;AACAH,OAAGC,IAAH,CAAQK,YAAR,GAAuB,IAAIA,YAAJ,EAAvB;;AAEAN,OAAGC,IAAH,CAAQM,YAAR,GAAuBJ,QAAQ,cAAR,CAAvB;AACAH,OAAGC,IAAH,CAAQO,IAAR,GAAeL,QAAQ,QAAR,CAAf;;AAEAH,OAAGC,IAAH,CAAQQ,MAAR,GAAiB,EAAjB;AACA;;AAEAT,OAAGC,IAAH,CAAQS,MAAR,GAAiBP,QAAQ,QAAR,CAAjB;AACH;;AAED,SAASC,YAAT,GAAuB;AACnBJ,OAAGC,IAAH,CAAQC,WAAR,CAAoBS,UAApB,CAA+B,QAA/B,EAAyC,WAAzC,EAAsD,CAAtD;AACAX,OAAGC,IAAH,CAAQC,WAAR,CAAoBS,UAApB,CAA+B,YAA/B,EAA6C,eAA7C,EAA8D,CAA9D;AACH;;AAEDX,GAAGY,KAAH,CAAS;AACLC,aAASb,GAAGc,SADP;;AAGLC,gBAAY;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,cAAM,EAXE;AAYRC,eAAO;AAZC,KAHP;;AAkBL;AACAC,YAAQ,kBAAY;AAChBnB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA,aAAKoB,QAAL,CAAc,YAAU;AACpB,iBAAKC,UAAL;AACH,SAFD,EAEG,CAFH;AAGH,KAhDI;;AAkDLA,gBAAY,sBAAW;AACnBC,gBAAQC,GAAR,CAAY,kBAAkB,KAAKL,KAAnC;AACA,aAAKA,KAAL,GAAa,KAAKA,KAAL,GAAa,CAA1B;AACAjB,WAAGC,IAAH,CAAQK,YAAR,CAAqBiB,UAArB,CAAgC,MAAhC;AACAvB,WAAGC,IAAH,CAAQM,YAAR,CAAqBiB,GAArB,GAA2BxB,GAAGC,IAAH,CAAQM,YAAR,CAAqBiB,GAArB,GAA2B,CAAtD;AACH,KAvDI;;AAyDLC,eAAW,qBAAW;AAClB;AACA;AACAJ,gBAAQC,GAAR,CAAY,sBAAqB,KAAKN,IAAL,CAAU,OAAV,CAArB,CAAZ;AACH,KA7DI;;AA+DLU,gBAAY,sBAAW;AACnB1B,WAAGC,IAAH,CAAQC,WAAR,CAAoByB,UAApB,CAA+B,QAA/B;AACH,KAjEI;;AAmELC,aAAS,mBAAW;AAChB5B,WAAGC,IAAH,CAAQC,WAAR,CAAoB2B,WAApB;AACH;;AArEI,CAAT","file":"unknown","sourcesContent":["function init(){\n    cc.tool = {}\n    var viewManager = require(\"viewManager\");\n    cc.tool.viewManager = new viewManager();\n    cc.tool.viewManager.init();\n\n\n    require(\"viewRegister\");\n    viewRegister();\n\n    var timeHandler = require(\"timeHandler\");\n    cc.tool.timeHandler = new timeHandler();\n\n    var eventManager = require(\"eventManager\");\n    cc.tool.eventManager = new eventManager();\n\n    cc.tool.gameVariable = require(\"gameVariable\");\n    cc.tool.Lang = require(\"langZh\");\n\n    cc.tool.prefab = {};\n    // cc.tool.viewManager.registView(\"hahaha\", \"hehehe\", \"hihihi\");\n\n    cc.tool.config = require(\"config\");\n}\n\nfunction viewRegister(){\n    cc.tool.viewManager.registView(\"kmView\", \"ui/kmView\", 2);\n    cc.tool.viewManager.registView(\"kilie5View\", \"ui/kilie5View\", 2);\n}\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        haha: [],\n        count: 0,\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        init();\n\n        // var self = this;\n        // cc.loader.loadRes(\"control/ListView\", cc.Prefab, function(err, prefab){\n        //     // cc.tool.prefab.listView = prefab;\n        //     console.log(\"type prefab = \" + typeof prefab)\n\n        //     var root = cc.instantiate(prefab);\n        //     root.setPosition(cc.v2(0, 0));\n        //     let listView = root.getChildByName(\"view\").getChildByName(\"content\").getComponent(\"ListView\");\n        //     listView.create(cc.tool.config.Direction.HORIZONTAL, 1, 1, 1, 240, 150);\n        //     listView.setItemModel(\"control/Renderer\", 160, 60);\n\n        //     var array = require(\"array1\");\n        //     var test = new array();\n        //     for(i = 0; i < 5; i++){\n        //         test.pushBack(i + 100)\n        //     }\n\n        //     listView.setDataProvider(test);\n\n\n        //     self.node.addChild(root);\n        // });\n\n        this.schedule(function(){\n            this.updateTime();\n        }, 1);\n    },\n\n    updateTime: function() {\n        console.log(\"this.count = \" + this.count);\n        this.count = this.count + 1;\n        cc.tool.eventManager.VAR_CHANGE(\"sec1\");\n        cc.tool.gameVariable.sec = cc.tool.gameVariable.sec + 1;\n    },\n\n    initScene: function() {\n        // cc.tool.viewManager.setRoot(this.node);\n        // cc.tool.viewManager.changeView(\"hahhahahaa\");\n        console.log(\"test type\" + typeof this.haha[\"wocao\"]);\n    },\n\n    testRemove: function() {\n        cc.tool.viewManager.changeView(\"kmView\");\n    },\n\n    btnBack: function() {\n        cc.tool.viewManager.backPreview();\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n"]}