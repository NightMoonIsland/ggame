{"version":3,"sources":["assets/script/tool/eventManager.js"],"names":["array1","require","test","cc","Class","extends","properties","eventListener","onLoad","init","super","testWork","console","log","addEventListener","eventType","target","func","output","pushBack","testWorkListener","key","dispatchEventListener","excuteWithFunc","item","index","VAR_CHANGE","varName"],"mappings":";;;;;;AAAA,IAAIA,SAASC,QAAQ,QAAR,CAAb;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;;AAEAE,GAAGC,KAAH,CAAS;AACLC,aAASH,IADJ;;AAGLI,gBAAY;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,uBAAe;AAXP,KAHP;;AAiBL;AACAC,YAAQ,kBAAY,CAEnB,CApBI;;AAsBLC,UAAM,gBAAW;AACb,aAAKC,KAAL,CAAWC,QAAX;AACH,KAxBI;;AA0BLA,cAAU,oBAAW;AACjBC,gBAAQC,GAAR,CAAY,mBAAZ;AACH,KA5BI;;AA8BLC,sBAAkB,0BAASC,SAAT,EAAoBC,MAApB,EAA4BC,IAA5B,EAAkC;AAChDD,eAAOE,MAAP;AACA;AACA,YAAG,CAACF,MAAD,IAAW,CAACC,IAAf,EAAqB;AACrB,YAAG,CAAC,KAAKV,aAAL,CAAmBQ,SAAnB,CAAJ,EAAkC;AAC9B,iBAAKR,aAAL,CAAmBQ,SAAnB,IAAgC,IAAIf,MAAJ,EAAhC;AACH;AACD,aAAKO,aAAL,CAAmBQ,SAAnB,EAA8BI,QAA9B,CAAuC,EAACH,QAAOA,MAAR,EAAgBC,MAAKA,IAArB,EAAvC;AACH,KAtCI;;AAwCLG,sBAAkB,4BAAW;AACzBR,gBAAQC,GAAR,CAAY,kBAAZ;AACA,aAAI,IAAIQ,GAAR,IAAe,KAAKd,aAAL,CAAmB,QAAnB,CAAf,EAA4C;AACxC,gBAAIU,OAAO,KAAKV,aAAL,CAAmB,QAAnB,EAA6Bc,GAA7B,CAAX;AACAJ,iBAAK,QAAL;AACH;AACJ,KA9CI;;AAgDLK,2BAAuB,+BAASP,SAAT,EAAoB;AACvC,aAAKR,aAAL,CAAmBQ,SAAnB,EAA8BQ,cAA9B,CAA6C,UAASC,IAAT,EAAeC,KAAf,EAAqB;AAC9D,gBAAIR,OAAOO,KAAKP,IAAhB;AACA,gBAAID,SAASQ,KAAKR,MAAlB;AACAC,iBAAKD,MAAL,EAAaD,SAAb;AACH,SAJD;AAKA;AACA;AACA;AACA;AACH,KA1DI;;AA4DLW,gBAAY,oBAASC,OAAT,EAAiB;AACzB,aAAKL,qBAAL,CAA2BK,OAA3B;AACH;;AA9DI,CAAT","file":"unknown","sourcesContent":["var array1 = require(\"array1\")\nvar test = require(\"test\")\n\ncc.Class({\n    extends: test,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        eventListener: [],\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        \n    },\n\n    init: function() {\n        this.super.testWork();\n    },\n\n    testWork: function() {\n        console.log(\"zenme hui zheyang\");\n    },\n\n    addEventListener: function(eventType, target, func) {\n        target.output();\n        // console.log()\n        if(!target || !func) return;\n        if(!this.eventListener[eventType]){\n            this.eventListener[eventType] = new array1();\n        }\n        this.eventListener[eventType].pushBack({target:target, func:func});\n    },\n\n    testWorkListener: function() {\n        console.log(\"to test listener\");\n        for(var key in this.eventListener[\"hahaha\"]){\n            var func = this.eventListener[\"hahaha\"][key];\n            func(\"hahaha\");\n        }\n    },\n\n    dispatchEventListener: function(eventType) {\n        this.eventListener[eventType].excuteWithFunc(function(item, index){\n            var func = item.func;\n            var target = item.target;\n            func(target, eventType);\n        })\n        // for(var key in this.eventListener[eventType]){\n        //     var func = this.eventListener[eventType][key];\n        //     func(key, eventType);\n        // }\n    },\n\n    VAR_CHANGE: function(varName){\n        this.dispatchEventListener(varName);\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n"]}